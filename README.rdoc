= ExecQueues

This is just me playing around with how to execute jobs on remote machines and get back the results via some communications channel (referred to as 'the storage backend' throughout the rest of this document). This toy currently supports messaging via Redis or MySQL. 

The idea is that you have some number of machines that you want to run jobs on (e.g. on a farm), and some clients that what to execute those methods which don't want to know the details of which machines the workers run on, how many of them there are, or how to transfer the inputs / outputs of those methods.

The <tt>worker.rb</tt> script acts as the worker, run this on your farm (or equivalent). The <tt>client.rb</tt> is an example client that constantly wants to find out what the value of various random multiples of pi are. It does this in a loop so I can test out performance.

== How to get it running
* Install and run a Redis server (this is used to store performance information atm regardless of which backend you use)
* Install and run a MySQL server if you want to try MySQL
* Run the <tt>create_db.sql</tt> script if you're trying MySQL
* Amend the <tt>Storage.backend=</tt> line in <tt>client.rb</tt> and <tt>worker.rb</tt> according to the storage backend you want to use
* Start some <tt>worker.rb</tt> and <tt>client.rb</tt> processes

If you do this correctly you should see the client's printing out something like this:
    [Sat Jun 05 18:15:59 +0100 2010] Submitted: #<Task:0x1014affb8 @id=272053, @state="unstarted", @type="CalculateMultipleOfPi", @input=759>
    [Sat Jun 05 18:15:59 +0100 2010] Received:  #<Task:0x1014aed70 @id=272053, @state="finished", @type="CalculateMultipleOfPi", @output=2384.46882135, @input=759>

    [Sat Jun 05 18:15:59 +0100 2010] Submitted: #<Task:0x1014ae550 @id=272054, @state="unstarted", @type="CalculateMultipleOfPi", @input=489>
    [Sat Jun 05 18:15:59 +0100 2010] Received:  #<Task:0x1014ad380 @id=272054, @state="finished", @type="CalculateMultipleOfPi", @output=1536.23880585, @input=489>

    ...
